package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"back/domain/entity"
	"back/infrastructure/repository"
	"back/infrastructure/request"
	"back/usecase"
	"context"
)

// JoinUser is the resolver for the joinUser field.
func (r *mutationResolver) JoinUser(ctx context.Context, groupID uint32, userID uint32) (*entity.MutationResponse, error) {
	req := request.NewJoinUserRequest(groupID, userID)
	msgs, ok := req.Validate(r.Validator)
	if !ok {
		return &entity.MutationResponse{
			Success:  false,
			Messages: msgs,
		}, nil
	}

	authUser := r.Resolver.AuthUserContext.Get(ctx)
	orm := r.Resolver.Orm

	joinUserUsecase := usecase.NewJoinUserUsecase(
		repository.NewGroupRepository(orm),
		repository.NewPointRepository(orm),
		repository.NewTransactionRepository(orm),
	)
	_, err := joinUserUsecase.Execute(groupID, userID, authUser.ID)
	if err != nil {
		return &entity.MutationResponse{
			Success:  false,
			Messages: []string{err.Message},
		}, nil
	}

	return &entity.MutationResponse{
		Success:  true,
		Messages: []string{"ユーザーを招待しました"},
	}, nil
}
